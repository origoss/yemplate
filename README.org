#+OPTIONS: ':nil *:t -:t ::t <:t H:3 \n:nil ^:t arch:headline author:t
#+OPTIONS: broken-links:nil c:nil creator:nil d:(not "LOGBOOK") date:t e:t
#+OPTIONS: email:nil f:t inline:t num:t p:nil pri:nil prop:nil stat:t tags:t
#+OPTIONS: tasks:t tex:t timestamp:t title:t toc:t todo:t |:t
#+TITLE: README
#+DATE: <2018-05-09 sze>
#+AUTHOR: Gergely Szabo
#+EMAIL: gergely.szabo@origoss.com
#+LANGUAGE: en
#+SELECT_TAGS: export
#+EXCLUDE_TAGS: noexport
#+CREATOR: Emacs 25.2.2 (Org mode 9.1.13)

* Introduction

  =yemplate= is a simple CLI wrapper around golang's [[https://golang.org/pkg/text/template][text/template]] library. 

  It takes to input:
  - A yaml file with defining parameters (=-p=)
  - An arbitrary text file using the =text/template= markup (=-t=)

* Installation
  
  Execute the following command:
  #+BEGIN_SRC bash :results verbatim
  go get github.com/origoss/yemplate
  #+END_SRC

* Examples
** Simple substitution

   The ~text1.txt~ template file looks like this:
   #+CAPTION: text1.txt
   #+BEGIN_SRC text :tangle text1.txt
     Welcome {{ .name }}, I know your favorite food is {{ .favoriteFood }}.
   #+END_SRC

   To execute a simple substitution:
   #+BEGIN_SRC bash :results verbatim :exports both
     yemplate text1.txt --set name=Gergely,favoriteFood=chocolate 
   #+END_SRC

   #+RESULTS:
   : Welcome Gergely, I know your favorite food is chocolate.

** Simple substitution with parameters file

   The ~param1.yaml~ file looks like this:
   #+CAPTION: param1.yaml
   #+BEGIN_SRC yaml :tangle param1.yaml
     name: Gergely
     favoriteFood: chocolate 
   #+END_SRC
   
   To execute the substitution:
   #+BEGIN_SRC bash :results verbatim :exports both
     yemplate text1.txt -f param1.yaml
   #+END_SRC

   #+RESULTS:
   : Welcome Gergely, I know your favorite food is chocolate.

   You can override the parameters defined in the file with the command-line
   parameters:
   #+BEGIN_SRC bash :results verbatim :exports both
     yemplate text1.txt -f param1.yaml --set favoriteFood=hamburger
   #+END_SRC

   #+RESULTS:
   : Welcome Gergely, I know your favorite food is hamburger.

** A bit more complex example

   The ~param2.yaml~ file looks like this:
   #+CAPTION: param2.yaml
   #+BEGIN_SRC yaml :tangle param2.yaml
     name: Gergely
     favoriteFoods: 
     - chocolate 
     - banana
     - ice cream
   #+END_SRC
   
   The ~text2.txt~ file looks like this:
   #+CAPTION: text2.txt
   #+BEGIN_SRC text :tangle text2.txt
     Welcome {{ .name }}, I know your favorite foods are
     {{ range .favoriteFoods -}}
       -{{ . }} 
     {{ end -}}
   #+END_SRC

   To execute the substitution:
   #+BEGIN_SRC bash :results verbatim :exports both
     yemplate text2.txt -f param2.yaml
   #+END_SRC

   #+RESULTS:
   : Welcome Gergely, I know your favorite foods are
   : -chocolate 
   : -banana 
   : -ice cream 

   Or you can try setting the parameters via the CLI:
   #+BEGIN_SRC bash :results verbatim :exports both
     yemplate text2.txt                           \
              --set "name=Kinga"                  \
              --set "favoriteFoods[0]=pizza"      \
              --set "favoriteFoods[1]=hamburger"
   #+END_SRC

   #+RESULTS:
   : Welcome Kinga, I know your favorite foods are
   : -pizza 
   : -hamburger 

#+SETUPFILE: /home/gergely/org-html-themes/setup/theme-readtheorg.setup
#+OPTIONS: html-link-use-abs-url:nil html-postamble:auto html-preamble:t
#+OPTIONS: html-scripts:t html-style:t html5-fancy:nil tex:t
#+HTML_DOCTYPE: xhtml-strict
#+HTML_CONTAINER: div
#+DESCRIPTION:
#+KEYWORDS:
#+HTML_LINK_HOME:
#+HTML_LINK_UP:
#+HTML_MATHJAX:
#+HTML_HEAD:
#+HTML_HEAD_EXTRA:
#+SUBTITLE:
#+INFOJS_OPT:
#+CREATOR: <a href="https://www.gnu.org/software/emacs/">Emacs</a> 25.2.2 (<a href="https://orgmode.org">Org</a> mode 9.1.13)
#+LATEX_HEADER:
#+OPTIONS: ':nil *:t -:t ::t <:t H:3 \n:nil ^:t arch:headline author:t
#+OPTIONS: broken-links:nil c:nil creator:nil d:(not "LOGBOOK") date:t e:t
#+OPTIONS: email:nil f:t inline:t num:t p:nil pri:nil prop:nil stat:t tags:t
#+OPTIONS: tasks:t tex:t timestamp:t title:t toc:t todo:t |:t
#+TITLE: Yemplate
#+DATE: <2018-05-10 cs>
#+AUTHOR: Gergely Szabo
#+EMAIL: gergely.szabo@origoss.com
#+LANGUAGE: en
#+SELECT_TAGS: export
#+EXCLUDE_TAGS: noexport
#+CREATOR: Emacs 25.2.2 (Org mode 9.1.13)
#+PROPERTY: header-args :eval never-export

* Introduction
  
  We at [[https://origoss.com][origoss]] love [[https://kubernetes.io][Kubernetes]]. Sometimes we use our Kubernetes deployment to
  run some [[https://kubernetes.io/docs/concepts/workloads/controllers/jobs-run-to-completion/][batch jobs]].

  Batch jobs are awesome but sometimes we find it a bit hard to work with.

* Use case
  
  Let's see a bit convoluted use case where we want to copy a git repository to
  a [[https://kubernetes.io/docs/concepts/storage/persistent-volumes/][persistent volume]].

** First approach

  First, let's create a manifest file for our job that will mount two volumes
  and perform the copy between the volumes.
  
  #+NAME: job1yaml
  #+CAPTION: job1.yaml 
  #+BEGIN_SRC yaml :tangle job1.yaml
    apiVersion: batch/v1
    kind: Job
    metadata:
      name: git-copy-1
    spec:
      template:
        spec:
          containers:
          - name: git-copier
            image: busybox
            volumeMounts:
            - name: gitrepo
              mountPath: /git
            - name: target
              mountPath: /target
            command:
            - sh
            - -c
            - |
              rm -rf /target/*
              rm -rf /target/.*
              cp -a /git/* /target
              ls -a /target/*/*
          restartPolicy: Never
          volumes:
          - name: gitrepo
            gitRepo:
              repository: 'https://github.com/origoss/yemplate.git'
          - name: target
            persistentVolumeClaim:
              claimName: git-repo-target
  #+END_SRC

  #+CAPTION: Starting job1
  #+BEGIN_SRC bash :results verbatim :exports both
    kubectl apply -f job1.yaml
  #+END_SRC

  #+RESULTS:
  : job.batch "git-copy-1" created

  After the job has been started, we can check the status with the ~describe~
  command.
  #+CAPTION: Status of job1
  #+BEGIN_SRC bash :results verbatim :exports both
    kubectl describe job git-copy-1
  #+END_SRC

  #+RESULTS:
  #+begin_example
  Name:           git-copy-1
  Namespace:      default
  Selector:       controller-uid=7769d70b-5431-11e8-b180-525400239935
  Labels:         controller-uid=7769d70b-5431-11e8-b180-525400239935
                  job-name=git-copy-1
  Annotations:    kubectl.kubernetes.io/last-applied-configuration={"apiVersion":"batch/v1","kind":"Job","metadata":{"annotations":{},"name":"git-copy-1","namespace":"default"},"spec":{"template":{"spec":{"containers":...
  Parallelism:    1
  Completions:    1
  Start Time:     Thu, 10 May 2018 11:06:46 +0200
  Pods Statuses:  0 Running / 1 Succeeded / 0 Failed
  Pod Template:
    Labels:  controller-uid=7769d70b-5431-11e8-b180-525400239935
             job-name=git-copy-1
    Containers:
     git-copier:
      Image:      busybox
      Port:       <none>
      Host Port:  <none>
      Command:
        sh
        -c
        rm -rf /target/*
  rm -rf /target/.*
  cp -a /git/* /target
  ls -a /target/*/*

      Environment:  <none>
      Mounts:
        /git from gitrepo (rw)
        /target from target (rw)
    Volumes:
     gitrepo:
      Type:        GitRepo (a volume that is pulled from git when the pod is created)
      Repository:  https://github.com/origoss/yemplate.git
      Revision:    
     target:
      Type:       PersistentVolumeClaim (a reference to a PersistentVolumeClaim in the same namespace)
      ClaimName:  git-repo-target
      ReadOnly:   false
  Events:
    Type    Reason            Age   From            Message
    ----    ------            ----  ----            -------
    Normal  SuccessfulCreate  14s   job-controller  Created pod: git-copy-1-bn5hd
  #+end_example

  Let's check the logs generated by the pod.
  #+CAPTION: Log of the pod created by job1
  #+BEGIN_SRC bash :results verbatim :exports both
    kubectl logs git-copy-1-bn5hd
  #+END_SRC

  #+RESULTS:
  #+begin_example
  rm: can't remove '.' or '..'
  rm: can't remove '.' or '..'
  /target/yemplate/LICENSE
  /target/yemplate/README.org
  /target/yemplate/main.go

  /target/yemplate/docs:
  .
  ..
  _config.yml
  index.org
  #+end_example

  Finally, we can remove the job.
  #+CAPTION: Delete job1
  #+BEGIN_SRC bash :results verbatim :exports both
    kubectl delete job git-copy-1
  #+END_SRC

  #+RESULTS:
  : job.batch "git-copy-1" deleted

** Repeat with another git repo
   
   We demonstrated, that it is relatively easy to start a job in Kubernetes.
   What if we want to repeat the previous exercise using a slightly different
   parameters, e.g. for a different git repository?

   For jobs, the current standard solution is to create a new yaml file based on
   the one shown in Listing [[job1yaml]].

   If we perform such a task regularly this task cries for automation. If it was
   a [[https://kubernetes.io/docs/concepts/workloads/controllers/deployment/][deployment]], we could use [[https://helm.sh/][helm]] or some other available tool to create a
   reusable template. 

   Fortunately, for jobs, we can use the simple [[https://github.com/origoss/yemplate][yemplate]] tool.

   Let's create a job template based on the [[job1yaml][previous job manifest]].
   
   #+NAME: job1yamlt
   #+CAPTION: job1.yaml.t
   #+BEGIN_SRC text :tangle job1.yaml.t
     apiVersion: batch/v1
     kind: Job
     metadata:
       name: git-copy-1
     spec:
       template:
         spec:
           containers:
           - name: git-copier
             image: busybox
             volumeMounts:
             - name: gitrepo
               mountPath: /git
             - name: target
               mountPath: /target
             command:
             - sh
             - -c
             - |
               rm -rf /target/*
               rm -rf /target/.*
               cp -a /git/* /target
               ls -a /target/*/*
           restartPolicy: Never
           volumes:
           - name: gitrepo
             gitRepo:
               repository: {{ .repository }}
           - name: target
             persistentVolumeClaim:
               claimName: git-repo-target
   #+END_SRC
  
   The only difference (besides the meaningless ~.t~ extension) is the
   ~repository~ field that had been replaced with a template markup ~{{
   .repository }}~.

   Next is to create a file that fills in the template parameters. This will be
   a yaml file with the following content:

   #+CAPTION: params1.yaml
   #+BEGIN_SRC yaml :tangle params1.yaml
     repository: https://github.com/origoss/yemplate.git 
   #+END_SRC 

   We can use ~yemplate~ now to fill in the holes:

   #+CAPTION: Templating with yemplate
   #+BEGIN_SRC bash :results verbatim :exports both
     yemplate -p params1.yaml -t job1.yaml.t
   #+END_SRC

   #+RESULTS:
   #+begin_example
   apiVersion: batch/v1
   kind: Job
   metadata:
     name: git-copy-1
   spec:
     template:
       spec:
         containers:
         - name: git-copier
           image: busybox
           volumeMounts:
           - name: gitrepo
             mountPath: /git
           - name: target
             mountPath: /target
           command:
           - sh
           - -c
           - |
             rm -rf /target/*
             rm -rf /target/.*
             cp -a /git/* /target
             ls -a /target/*/*
         restartPolicy: Never
         volumes:
         - name: gitrepo
           gitRepo:
             repository: https://github.com/origoss/yemplate.git
         - name: target
           persistentVolumeClaim:
             claimName: git-repo-target
   #+end_example

   As you can see, ~yemplate~ generated to the stdout a proper Kubernetes job
   manifest file with the provided parameter in the value of the ~repository~
   field.

   We can use this for creating our job:

  #+CAPTION: Starting templated job1
  #+BEGIN_SRC bash :results verbatim :exports both
    yemplate -p params1.yaml -t job1.yaml.t | kubectl apply -f -
  #+END_SRC

  #+RESULTS:
  : job.batch "git-copy-1" created
